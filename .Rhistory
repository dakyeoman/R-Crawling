filter(class) %>%
group_by(manufacturer) %>%
summarise(cty_mean <- mean(cty)) %>%
arrange(cty_mean)
df_suv <- mpg %>%
filter(class) %>%
group_by(manufacturer) %>%
summarise(cty_mean <- mean(cty)) %>%
arrange(cty_mean)
df_suv <- mpg %>%
filter(class) %>%
group_by(manufacturer) %>%
summarise(cty_mean <- mean(cty)) %>%
arrange(cty_mean)
df_suv <- mpg %>%
group_by(manufacturer) %>%
summarise(cty_mean <- mean(cty)) %>%
arrange(cty_mean)
mpg %>%
group_by(manufacturer, drv) %>% #회사별, 구동방식별 분리
summarise(mean_cty = mean(cty)) %>% #cty 평균 산출
head(5)
#dplyr 조합
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv") %>% #"suv"추출
mutate(tot = (cty + hwy)/2) %>% #통합 연비 변수 생성
summarise(totm = mean(tot)) %>% #통합 연비 평균 산출
arrange(desc(totm)) %>%
head(5)
df_suv <- mpg %>%
filter(class == "suv") %>%
table(mpg$manufacturer)
summarise(cty_mean = mean(cty)
df_suv <- mpg %>%
filter(class == "suv") %>%
grou_by(manufacturer) %>%
summarise(cty_mean = mean(cty)) %>%
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv") %>% #"suv"추출
mutate(tot = (cty + hwy)/2) %>% #통합 연비 변수 생성
summarise(totm = mean(tot)) %>% #통합 연비 평균 산출
arrange(desc(totm)) %>%
head(5)
df_suv <- mpg %>%
filter(class == "suv") %>%
grou_by(manufacturer) %>%
summarise(cty_mean = mean(cty)) %>%
arrange(cty_mean)
grou[_by(manufacturer) %>%
df_suv <- mpg %>%
filter(class == "suv") %>%
group_by(manufacturer) %>%
summarise(cty_mean = mean(cty)) %>%
arrange(cty_mean)
df_suv
class
mpg$class
mpg$manufacturer
df_suv <- mpg %>%
filter(class == "suv") %>%
group_by(manufacturer) %>%
summarise(cty_mean = mean(cty)) %>%
arrange(cty_mean) %>%
head(5)
df_suv
arrange(decs(cty_mean) %>%
df_suv
df_suv <- mpg %>%
arrange(desc(cty_mean) %>%
df_suv
arrange(desc(cty_mean) %>%
df_suv
df_suv <- mpg %>%
filter(class == "suv") %>%
group_by(manufacturer) %>%
summarise(cty_mean = mean(cty)) %>%
arrange(cty_mean) %>%
head(5)
df_suv
df_suv <- mpg %>%
filter(class == "suv") %>%
group_by(manufacturer) %>%
summarise(cty_mean = mean(cty)) %>%
arrange(desc(cty_mean)) %>%
head(5)
df_suv
ggplot(data = df_suv)
ggplot(data = df_suv, aes(x = manufacturer, y = cty)
ggplot(data = df_suv, aes(x = manufacturer, y = cty))
ggplot(data = df_suv, aes(x = manufacturer, y = cty)
ggplot(data = df_suv, aes(x = manufacturer, y = cty)) + geom_bar
()
ggplot(data = df_suv, aes(x = manufacturer, y = cty)) + geom_bar()
ggplot(data = df_suv, aes(x = manufacturer, y = cty)) + geom_col()
ggplot(data = df_suv, aes(x = manufacturer, y = cty_mean)) + geom_col()
ggplot(data = df_suv, aes(x = manufacturer, y = cty_mean)) + geom_col()
df_suv <- mpg %>%
filter(class == "suv") %>%
group_by(manufacturer) %>%
summarise(cty_mean = mean(cty)) %>%
arrange(desc(cty_mean)) %>%
head(5) #상위 5개
df_suv
ggplot(data = df_suv, aes(x = manufacturer, y = cty_mean)) + geom_col()
#데이터 전처리 Data Preprocessing
library(dplyr)
df_suv <- mpg %>%
filter(class == "suv") %>%
group_by(manufacturer) %>%
summarise(cty_mean = mean(cty)) %>%
arrange(desc(cty_mean)) %>%
head(5) #상위 5개
df_suv
ggplot(data = df_suv, aes(x = manufacturer, y = cty_mean)) + geom_col()
#Part 3 그래프 211104 ----------------------------------------
#1. 산점도 geom_point()
library(ggplot2)
df_suv <- mpg %>%
filter(class == "suv") %>%
group_by(manufacturer) %>%
summarise(cty_mean = mean(cty)) %>%
arrange(desc(cty_mean)) %>%
head(5) #상위 5개
df_suv
ggplot(data = df_suv, aes(x = manufacturer, y = cty_mean)) + geom_col()
ggplot(data = df_suv, aes(x = reorder(manufacturer, -cty_mean), y = cty_mean)) + geom_col()
df_class <- mpg %>%
filter(class)
df_class <- mpg %>%filter(class)
df_class <- mpg %>%filter(class)
ggplot(data = )
df_class <- mpg %>%filter(class)
df_class <- mpg %>% filter(class)
ggplot(data = )
ggplot(data = df_class, aes(x = class)), geom_bar()
ggplot(data = df_class, aes(x = df_class)), geom_bar()
ggplot(data = df_class, aes(x = class)), geom_bar()
df_class <- mpg
ggplot(data = df_class, aes(x = class)), geom_bar()
df_class <- mpg %>%
filter(class)
ggplot(data = df_class, aes(x = class)), geom_bar()
ggplot(data = mpg, aes(x = class)), geom_bar()
ggplot(data = mpg, aes(x = class)) + geom_bar()
ggplot(data = mpg, aes(x = reorder(class)) + geom_bar()
ggplot(data = mpg, aes(x = reorder(class)) + geom_bar()
ggplot(data = mpg, aes(x = reorder(class))) + geom_bar()
ggplot(data = mpg, aes(x = class)) geom_bar()
ggplot(data = mpg, aes(x = class)) + geom_bar()
ggplot(data = mpg, aes(x = reorder(class))) + geom_bar()
ggplot(data = mpg, aes(x = class)) + geom_bar()
#Q2. class 빈도그래프
ggplot(data = mpg, aes(x = class)) + geom_bar()
#4. 시계열그래프(선)
ggplot(data = economics, aes(x = date, y = unemploy)) + geom_line()
#4. 시계열그래프(선)
ggplot(data = economics, aes(x = date, y = unemploy)) + geom_line()
ggplot(data = economics, aes(x = date, y =psavert)) + geom_line
ggplot(data = economics, aes(x = date, y =psavert)) + geom_line()
#4. 시계열그래프(선)
ggplot(data = economics, aes(x = date, y = unemploy)) + geom_line()
ggplot(data = economics, aes(x = date, y =psavert)) + geom_line()
#Boxplox 상자 그림
#Boxplox 상자 그림
ggplot(data = mpg, aes(x = drv, y = hwy)) + geom_boxplot()
#Boxplox 상자 그림
ggplot(data = mpg, aes(x = drv, y = hwy)) + geom_boxplot() #drv별 hwy
filter(class = c("compact", "subcompact", "suv")
#p198 문제 해결
cty_c <- mpg %>%
filter(class = c("compact", "subcompact", "suv"))
#p198 문제 해결
cty_c <- mpg %>%
filter(class = "compact", "subcompact", "suv")
cty_c <- mpg %>%
filter(class = "compact", "subcompact", "suv")
mpg$class
#p198 문제 해결
cty_c <- mpg %>%
filter(class = compact, subcompact, suvt)
#p198 문제 해결
cty_c <- mpg %>%
filter(class = compact, subcompact, suv)
#p198 문제 해결
cty_c <- mpg %>%
filter(class == compact, subcompact, suv)
#p198 문제 해결
cty_c <- mpg %>%
filter(class == "compact", "subcompact", "suv")
=
#p198 문제 해결
cty_c <- mpg %>%
filter(class == compact, subcompact, suv)
#----
21tokyo <- read.csv(file.choose()) #csv_exam.csv
#----
tokyo_tweet <- read.csv(file.choose()) #csv_exam.csv
table(tokyo_tweet)
tokyo_tweet
tokyo <- read.csv(file.choose()) #csv_exam.csv
tokyo
tokyo
tokyo <- read.csv(file.choose()) #csv_exam.csv
tokyo
tokyo_data<- read.csv(file.choose()) #csv_exam.csv
tokyo
tokyo_data
a <- c(1, 2, 3)
,
,
(1, 2, 3)
a <- c(1, 2, 3)
a[1]
dd
#install.packages("stringr")
library(stringr)
##클리앙 크롤링
i <- 1
final_data <- NULL
for(i in 1:10){
url <- paste0("https://www.clien.net/service/board/park?&od=T31&category=0&po=0", i= -1)
b <- readLines(url, encoding = "UTF-8") ##or EUC-KR
length(b)
head(b, 30)
tail(b)
}
#제목 추출
b2<- b[str_detect(b, "subject_fixed")]
title <- str_extract(b2, "(?<=title=\").*(?=\">)")
#조회수 추출
b3<- b[str_detect(b, "<span class=\"hit\">")];b3
for(i in 1:10){
hit <- str_extract(b3, "(?<=\">).*(?=</span>)")[-1]
#sapply(b4, function(x){x[1]}) #함수 바로 작성 가능
##way2
#ff<- function(x) {
#   x[2]
# }
# sapply(b4, ff)
# str_sub(sapply(b4, ff), end= -8) #end= -8: 뒤에서 글자 8개를 삭제 *변동
##url 추출
b5 <- b[which(str_detect(b, "subject_fixed")) -2]
#which: TRUE값이 있는 index만 추출
#-2 : 소스코드에서 제목 두 줄 앞
b6 <- str_sub(str_extract(b5, "(?<=href=\").*(?=data-role)"), end = -4)
url <- paste0("https://www.clien.net", b6)
data <- cbind(title, hit, url)
final_data<- rbind(final_data, data)
cat("\n", i)
}
dim(final_data)
head(final_data)#엥 이상하다 27분 02초
##클리앙 크롤링
i <- 1
final_data <- NULL
for(i in 1:10){
b <- readLines(url, encoding = "UTF-8") ##or EUC-KR
length(b)
head(b, 30)
tail(b)
#제목 추출
b2<- b[str_detect(b, "subject_fixed")]
title <- str_extract(b2, "(?<=title=\").*(?=\">)")
#조회수 추출
b3<- b[str_detect(b, "<span class=\"hit\">")];b3
for(i in 1:10){
hit <- str_extract(b3, "(?<=\">).*(?=</span>)")[-1]
#sapply(b4, function(x){x[1]}) #함수 바로 작성 가능
##way2
#ff<- function(x) {
#   x[2]
# }
# sapply(b4, ff)
# str_sub(sapply(b4, ff), end= -8) #end= -8: 뒤에서 글자 8개를 삭제 *변동
##url 추출
b5 <- b[which(str_detect(b, "subject_fixed")) -2]
#which: TRUE값이 있는 index만 추출
#-2 : 소스코드에서 제목 두 줄 앞
b6 <- str_sub(str_extract(b5, "(?<=href=\").*(?=data-role)"), end = -4)
url <- paste0("https://www.clien.net", b6)
data <- cbind(title, hit, url)
final_data<- rbind(final_data, data)
cat("\n", i)
}
dim(final_data)
head(final_data)#엥 이상하다 27분 02초
for(i in 1:10){
hit <- str_extract(b3, "(?<=\">).*(?=</span>)")[-1]
#sapply(b4, function(x){x[1]}) #함수 바로 작성 가능
##way2
#ff<- function(x) {
#   x[2]
# }
# sapply(b4, ff)
# str_sub(sapply(b4, ff), end= -8) #end= -8: 뒤에서 글자 8개를 삭제 *변동
##url 추출
b5 <- b[which(str_detect(b, "subject_fixed")) -2]
#which: TRUE값이 있는 index만 추출
#-2 : 소스코드에서 제목 두 줄 앞
b6 <- str_sub(str_extract(b5, "(?<=href=\").*(?=data-role)"), end = -4)
url <- paste0("https://www.clien.net", b6)
data <- cbind(title, hit, url)
final_data<- rbind(final_data, data)
cat("\n", i)
}
for(i in 1:10){
url <- paste0("https://www.clien.net/service/board/park?&od=T31&category=0&po=0", i= -1)
b <- readLines(url, encoding = "UTF-8") ##or EUC-KR
length(b)
head(b, 30)
tail(b)
#str_extract(b2, "(?<=abc").*(?=ijk)")##abc와 ijk 사이에 있는 텍스트 추출
#str_extract(data, "(?<=abc).*(?=)")##앞에 abc가 있는 것 추출
#str_extract(data, "(?<=).*(?=i)")##뒤에 i가 있는 것 추출
#제목 추출
b2<- b[str_detect(b, "subject_fixed")]
title <- str_extract(b2, "(?<=title=\").*(?=\">)")
#조회수 추출
b3<- b[str_detect(b, "<span class=\"hit\">")];b3
#b4 <- str_split(b3, "hit\">");b4
##way1
for(i in 1:10){
hit <- str_extract(b3, "(?<=\">).*(?=</span>)")[-1]
#sapply(b4, function(x){x[1]}) #함수 바로 작성 가능
##way2
#ff<- function(x) {
#   x[2]
# }
# sapply(b4, ff)
# str_sub(sapply(b4, ff), end= -8) #end= -8: 뒤에서 글자 8개를 삭제 *변동
##url 추출
b5 <- b[which(str_detect(b, "subject_fixed")) -2]
#which: TRUE값이 있는 index만 추출
#-2 : 소스코드에서 제목 두 줄 앞
b6 <- str_sub(str_extract(b5, "(?<=href=\").*(?=data-role)"), end = -4)
url <- paste0("https://www.clien.net", b6)
data <- cbind(title, hit, url)
final_data<- rbind(final_data, data)
cat("\n", i)
}
}
for(i in 1:10){
hit <- str_extract(b3, "(?<=\">).*(?=</span>)")[-1]
}
##클리앙 크롤링
i <- 1
final_data <- NULL
for(i in 1:10){
b <- readLines(url, encoding = "UTF-8") ##or EUC-KR
length(b)
head(b, 30)
tail(b)
#제목 추출
b2<- b[str_detect(b, "subject_fixed")]
title <- str_extract(b2, "(?<=title=\").*(?=\">)")
#조회수 추출
b3<- b[str_detect(b, "<span class=\"hit\">")];b3
for(i in 1:10){
hit <- str_extract(b3, "(?<=\">).*(?=</span>)")[-1]
}
##클리앙 크롤링
i <- 1
final_data <- NULL
for(i in 1:10){
url <- paste0("https://www.clien.net/service/board/park?&od=T31&category=0&po=0", i= -1)
b <- readLines(url, encoding = "UTF-8") ##or EUC-KR
length(b)
head(b, 30)
tail(b)
}
##클리앙 크롤링
i <- 1
##데이터 불러오기
data<-read.csv(file.choose())
data
str(data)
##데이터 탐색
summary(data)
##데이터 탐색
summary(data)
boxplot(push.up~factor(gender), data=data, col="light grey")
# ~ : Y = X  facter(gender): gender는 범주형 변수
boxplot(plank~factor(gender), data=data, col="light grey")
#1. one-sample ttest(단일표본 t검정)
t.test(data$push.up, mu=25) #mu 로 모집단의 평균 지정
t.test(data$push.up, mu=30)
#2. independent ttest:
#성별에 따른 차이가 통계적으로 유의한지 확인
t.test(push.up~factor(gender), data=data)
t.test(data$plank, data$push.up, paired=TRUE)
# 가설 설정 및 측정
# 가설 설정 및 측정
# 임계값보다 t값이 크다(***?)  - 유의수준보다 p값이 작다
t.test(data$plank, data$push.up, paired=TRUE)
t.test(plank~factor(gender), data=data)
#2. independent ttest:
#성별에 따른 차이가 통계적으로 유의한지 확인
t.test(push.up~factor(gender), data=data)
(plank~factor(gender), data=data)
t.test(plank~factor(gender), data=data)
library(stringr)
dc_data <- NULL
for(i in 1:10){
url <- paste0("https://gall.dcinside.com/board/lists/?id=superidea&page=", i)
Sys.sleep(runif(1)*2)
b <- readLines(url, encoding = "UTF-8")
#제목/url
index <- which(str_detect(b, "gall_tit ub-word"))[-1]
b2 <- b[index+1]
title <- str_trim(str_extract(b2, ("(?<=</strong>).*(?=</a>)")))
con_url <- str_sub(str_extract(b2, ("(?<=a href=).*(?=em class)")), 3, end = -17)
con_url2 <- paste0("https://gall.dcinside.com/", con_url)
#조회수
hit_index <- which(str_detect(b, "gall_count"))[-1]
hit <- as.numeric(str_sub(str_extract(b[hit_index], ("(?<=gall_count).*(?=</td>)")), 3))
hit
#추천수
rec_index <- which(str_detect(b, "gall_recommend"))[-1]
rec <- as.numeric(str_extract(b[rec_index], ("(?<=gall_recommend\">).*(?=</td>)")))
data <- cbind(title, con_url2, hit, rec) #->one matrix
dc_data <- rbind(dc_data, data)
cat("\n", i)
}
head(dc_data)
head(dc_data)
dim(dc_data)
setwd("/Users/adrua/Desktop/R-Crawling_new/R-Crawling/")
write.csv(dc_data, "dc_data.csv", row.names = F)
data <- read.csv("dc_data.csv")
head(data)
dim(data)
url <- as.character(data$con_url2);url
length(url)
i <- 1
contents <- c()
ano<-read.csv(file.choose())
reg<-read.csv(file.choose())
head(ano)
head(reg)
gr <- ano
hr<-read.csv(file.choose())
str(hr)
boxplot(hear_rate~factor(group), data = hr, col = "light grey")
boxplot(heart_rate~factor(group), data = hr, col = "light grey")
boxplot(heart_rate~factor(group), data = hr, col = "light grey")
summary(hr)
fit <- aov(heart_rate~ factor(group), data = hr)
TukeyHSD(fit)
str(hr)
head(hr)
tail(hr)
tail(hr)
summary(hr)
hr
#일원분산분석
fit <- aov(heart_rate~ factor(group), data = hr)
summary(fi)
summary(fi#사후검정
summary(fit)
summary(fit)
#one-way ANOVA일원분산분석
fit <- aov(heart_rate~ factor(group), data = hr)
#사후검정
TukeyHSD(fit)
summary(hr)
#COV. COR.
height=c(170,175,180,165,173,169,183,171,177,174)
weight=c(70,68,85,71,65,69,78,73,78,71)
data<-data.frame(height,weight)
##데이터 탐색
data
summary(data)
plot(data)
##상관분석
cor(data)
qplot(data)
library(ggplot2)
qplot(data)
plot(data)
ggplot(data = mpg, aes(x = displ, y = hwy)) + #데이터, 축 설정
geom_point() + #그래프 종류(산점도)
xlim(3, 6) + #x축 범위 설정 3~6
ylim(10, 30) #y축 범위 설정 10~30
ggplot(data = data, aes(x = displ, y = hwy))
ggplot(data = data, aes(x = height, y = weight))
geom_point() + #그래프 종류(산점도)
xlim(3, 6) + #x축 범위 설정 3~6
ylim(10, 30)}
geom_point() + #그래프 종류(산점도)
xlim(3, 6) + #x축 범위 설정 3~6
ylim(10, 30)
ggplot(data = data, aes(x = height, y = weight)) +
geom_point()
ggplot(data = data, aes(x = height, y = weight)) + geom_point()
#COV. COR.
height=c(170,175,180,165,173,169,183,171,177,174)
weight=c(70,68,85,71,65,69,78,73,78,71)
data<-data.frame(height,weight)
##데이터 탐색
data
summary(data)
plot(data)
reg<-read.csv(file.choose())
#head(reg)
reg <- lm(weight ~ height, data = data)
reg<-read.csv(file.choose())
summary(reg1)
#head(reg)
reg1 <- lm(weight ~ height, data = data) #리니어모델lm
summary(reg1)
