filter(class$suv) %>%
group_by(manufacturer) %>%
summarise(cty_mean <- mean(cty)) %>%
filter
mpg %>%
filter(class$suv)
#p193 문제해결
#Q1. "suv"차종에서 평균 도시 연비(cty)가 가장 높은 회사 다섯 곳을 막대그래프로 표현해보자
mpg
mpg %>%
filter(class$suv) %>%
group_by(manufacturer) %>%
summarise(cty_mean <- mean(cty)) %>%
filter
mpg %>%
filter(class$suv) %>%
group_by(manufacturer) %>%
summarise(cty_mean <- mean(cty)) %>%
arrange(cty_mean)
mpg %>%
filter(csuv) %>%
group_by(manufacturer) %>%
summarise(cty_mean <- mean(cty)) %>%
arrange(cty_mean)
mpg %>%
filter(suv) %>%
group_by(manufacturer) %>%
summarise(cty_mean <- mean(cty)) %>%
arrange(cty_mean)
mpg %>%
filter(class) %>%
group_by(manufacturer) %>%
summarise(cty_mean <- mean(cty)) %>%
arrange(cty_mean)
df_suv <- mpg %>%
filter(class) %>%
group_by(manufacturer) %>%
summarise(cty_mean <- mean(cty)) %>%
arrange(cty_mean)
df_suv <- mpg %>%
filter(class) %>%
group_by(manufacturer) %>%
summarise(cty_mean <- mean(cty)) %>%
arrange(cty_mean)
df_suv <- mpg %>%
filter(class) %>%
group_by(manufacturer) %>%
summarise(cty_mean <- mean(cty)) %>%
arrange(cty_mean)
df_suv <- mpg %>%
group_by(manufacturer) %>%
summarise(cty_mean <- mean(cty)) %>%
arrange(cty_mean)
mpg %>%
group_by(manufacturer, drv) %>% #회사별, 구동방식별 분리
summarise(mean_cty = mean(cty)) %>% #cty 평균 산출
head(5)
#dplyr 조합
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv") %>% #"suv"추출
mutate(tot = (cty + hwy)/2) %>% #통합 연비 변수 생성
summarise(totm = mean(tot)) %>% #통합 연비 평균 산출
arrange(desc(totm)) %>%
head(5)
df_suv <- mpg %>%
filter(class == "suv") %>%
table(mpg$manufacturer)
summarise(cty_mean = mean(cty)
df_suv <- mpg %>%
filter(class == "suv") %>%
grou_by(manufacturer) %>%
summarise(cty_mean = mean(cty)) %>%
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv") %>% #"suv"추출
mutate(tot = (cty + hwy)/2) %>% #통합 연비 변수 생성
summarise(totm = mean(tot)) %>% #통합 연비 평균 산출
arrange(desc(totm)) %>%
head(5)
df_suv <- mpg %>%
filter(class == "suv") %>%
grou_by(manufacturer) %>%
summarise(cty_mean = mean(cty)) %>%
arrange(cty_mean)
grou[_by(manufacturer) %>%
df_suv <- mpg %>%
filter(class == "suv") %>%
group_by(manufacturer) %>%
summarise(cty_mean = mean(cty)) %>%
arrange(cty_mean)
df_suv
class
mpg$class
mpg$manufacturer
df_suv <- mpg %>%
filter(class == "suv") %>%
group_by(manufacturer) %>%
summarise(cty_mean = mean(cty)) %>%
arrange(cty_mean) %>%
head(5)
df_suv
arrange(decs(cty_mean) %>%
df_suv
df_suv <- mpg %>%
arrange(desc(cty_mean) %>%
df_suv
arrange(desc(cty_mean) %>%
df_suv
df_suv <- mpg %>%
filter(class == "suv") %>%
group_by(manufacturer) %>%
summarise(cty_mean = mean(cty)) %>%
arrange(cty_mean) %>%
head(5)
df_suv
df_suv <- mpg %>%
filter(class == "suv") %>%
group_by(manufacturer) %>%
summarise(cty_mean = mean(cty)) %>%
arrange(desc(cty_mean)) %>%
head(5)
df_suv
ggplot(data = df_suv)
ggplot(data = df_suv, aes(x = manufacturer, y = cty)
ggplot(data = df_suv, aes(x = manufacturer, y = cty))
ggplot(data = df_suv, aes(x = manufacturer, y = cty)
ggplot(data = df_suv, aes(x = manufacturer, y = cty)) + geom_bar
()
ggplot(data = df_suv, aes(x = manufacturer, y = cty)) + geom_bar()
ggplot(data = df_suv, aes(x = manufacturer, y = cty)) + geom_col()
ggplot(data = df_suv, aes(x = manufacturer, y = cty_mean)) + geom_col()
ggplot(data = df_suv, aes(x = manufacturer, y = cty_mean)) + geom_col()
df_suv <- mpg %>%
filter(class == "suv") %>%
group_by(manufacturer) %>%
summarise(cty_mean = mean(cty)) %>%
arrange(desc(cty_mean)) %>%
head(5) #상위 5개
df_suv
ggplot(data = df_suv, aes(x = manufacturer, y = cty_mean)) + geom_col()
#데이터 전처리 Data Preprocessing
library(dplyr)
df_suv <- mpg %>%
filter(class == "suv") %>%
group_by(manufacturer) %>%
summarise(cty_mean = mean(cty)) %>%
arrange(desc(cty_mean)) %>%
head(5) #상위 5개
df_suv
ggplot(data = df_suv, aes(x = manufacturer, y = cty_mean)) + geom_col()
#Part 3 그래프 211104 ----------------------------------------
#1. 산점도 geom_point()
library(ggplot2)
df_suv <- mpg %>%
filter(class == "suv") %>%
group_by(manufacturer) %>%
summarise(cty_mean = mean(cty)) %>%
arrange(desc(cty_mean)) %>%
head(5) #상위 5개
df_suv
ggplot(data = df_suv, aes(x = manufacturer, y = cty_mean)) + geom_col()
ggplot(data = df_suv, aes(x = reorder(manufacturer, -cty_mean), y = cty_mean)) + geom_col()
df_class <- mpg %>%
filter(class)
df_class <- mpg %>%filter(class)
df_class <- mpg %>%filter(class)
ggplot(data = )
df_class <- mpg %>%filter(class)
df_class <- mpg %>% filter(class)
ggplot(data = )
ggplot(data = df_class, aes(x = class)), geom_bar()
ggplot(data = df_class, aes(x = df_class)), geom_bar()
ggplot(data = df_class, aes(x = class)), geom_bar()
df_class <- mpg
ggplot(data = df_class, aes(x = class)), geom_bar()
df_class <- mpg %>%
filter(class)
ggplot(data = df_class, aes(x = class)), geom_bar()
ggplot(data = mpg, aes(x = class)), geom_bar()
ggplot(data = mpg, aes(x = class)) + geom_bar()
ggplot(data = mpg, aes(x = reorder(class)) + geom_bar()
ggplot(data = mpg, aes(x = reorder(class)) + geom_bar()
ggplot(data = mpg, aes(x = reorder(class))) + geom_bar()
ggplot(data = mpg, aes(x = class)) geom_bar()
ggplot(data = mpg, aes(x = class)) + geom_bar()
ggplot(data = mpg, aes(x = reorder(class))) + geom_bar()
ggplot(data = mpg, aes(x = class)) + geom_bar()
#Q2. class 빈도그래프
ggplot(data = mpg, aes(x = class)) + geom_bar()
#4. 시계열그래프(선)
ggplot(data = economics, aes(x = date, y = unemploy)) + geom_line()
#4. 시계열그래프(선)
ggplot(data = economics, aes(x = date, y = unemploy)) + geom_line()
ggplot(data = economics, aes(x = date, y =psavert)) + geom_line
ggplot(data = economics, aes(x = date, y =psavert)) + geom_line()
#4. 시계열그래프(선)
ggplot(data = economics, aes(x = date, y = unemploy)) + geom_line()
ggplot(data = economics, aes(x = date, y =psavert)) + geom_line()
#Boxplox 상자 그림
#Boxplox 상자 그림
ggplot(data = mpg, aes(x = drv, y = hwy)) + geom_boxplot()
#Boxplox 상자 그림
ggplot(data = mpg, aes(x = drv, y = hwy)) + geom_boxplot() #drv별 hwy
filter(class = c("compact", "subcompact", "suv")
#p198 문제 해결
cty_c <- mpg %>%
filter(class = c("compact", "subcompact", "suv"))
#p198 문제 해결
cty_c <- mpg %>%
filter(class = "compact", "subcompact", "suv")
cty_c <- mpg %>%
filter(class = "compact", "subcompact", "suv")
mpg$class
#p198 문제 해결
cty_c <- mpg %>%
filter(class = compact, subcompact, suvt)
#p198 문제 해결
cty_c <- mpg %>%
filter(class = compact, subcompact, suv)
#p198 문제 해결
cty_c <- mpg %>%
filter(class == compact, subcompact, suv)
#p198 문제 해결
cty_c <- mpg %>%
filter(class == "compact", "subcompact", "suv")
=
#p198 문제 해결
cty_c <- mpg %>%
filter(class == compact, subcompact, suv)
#----
21tokyo <- read.csv(file.choose()) #csv_exam.csv
#----
tokyo_tweet <- read.csv(file.choose()) #csv_exam.csv
table(tokyo_tweet)
tokyo_tweet
tokyo <- read.csv(file.choose()) #csv_exam.csv
tokyo
tokyo
tokyo <- read.csv(file.choose()) #csv_exam.csv
tokyo
tokyo_data<- read.csv(file.choose()) #csv_exam.csv
tokyo
tokyo_data
a <- c(1, 2, 3)
,
,
(1, 2, 3)
a <- c(1, 2, 3)
a[1]
dd
#install.packages("stringr")
library(stringr)
##클리앙 크롤링
i <- 1
final_data <- NULL
for(i in 1:10){
url <- paste0("https://www.clien.net/service/board/park?&od=T31&category=0&po=0", i= -1)
b <- readLines(url, encoding = "UTF-8") ##or EUC-KR
length(b)
head(b, 30)
tail(b)
}
#제목 추출
b2<- b[str_detect(b, "subject_fixed")]
title <- str_extract(b2, "(?<=title=\").*(?=\">)")
#조회수 추출
b3<- b[str_detect(b, "<span class=\"hit\">")];b3
for(i in 1:10){
hit <- str_extract(b3, "(?<=\">).*(?=</span>)")[-1]
#sapply(b4, function(x){x[1]}) #함수 바로 작성 가능
##way2
#ff<- function(x) {
#   x[2]
# }
# sapply(b4, ff)
# str_sub(sapply(b4, ff), end= -8) #end= -8: 뒤에서 글자 8개를 삭제 *변동
##url 추출
b5 <- b[which(str_detect(b, "subject_fixed")) -2]
#which: TRUE값이 있는 index만 추출
#-2 : 소스코드에서 제목 두 줄 앞
b6 <- str_sub(str_extract(b5, "(?<=href=\").*(?=data-role)"), end = -4)
url <- paste0("https://www.clien.net", b6)
data <- cbind(title, hit, url)
final_data<- rbind(final_data, data)
cat("\n", i)
}
dim(final_data)
head(final_data)#엥 이상하다 27분 02초
##클리앙 크롤링
i <- 1
final_data <- NULL
for(i in 1:10){
b <- readLines(url, encoding = "UTF-8") ##or EUC-KR
length(b)
head(b, 30)
tail(b)
#제목 추출
b2<- b[str_detect(b, "subject_fixed")]
title <- str_extract(b2, "(?<=title=\").*(?=\">)")
#조회수 추출
b3<- b[str_detect(b, "<span class=\"hit\">")];b3
for(i in 1:10){
hit <- str_extract(b3, "(?<=\">).*(?=</span>)")[-1]
#sapply(b4, function(x){x[1]}) #함수 바로 작성 가능
##way2
#ff<- function(x) {
#   x[2]
# }
# sapply(b4, ff)
# str_sub(sapply(b4, ff), end= -8) #end= -8: 뒤에서 글자 8개를 삭제 *변동
##url 추출
b5 <- b[which(str_detect(b, "subject_fixed")) -2]
#which: TRUE값이 있는 index만 추출
#-2 : 소스코드에서 제목 두 줄 앞
b6 <- str_sub(str_extract(b5, "(?<=href=\").*(?=data-role)"), end = -4)
url <- paste0("https://www.clien.net", b6)
data <- cbind(title, hit, url)
final_data<- rbind(final_data, data)
cat("\n", i)
}
dim(final_data)
head(final_data)#엥 이상하다 27분 02초
for(i in 1:10){
hit <- str_extract(b3, "(?<=\">).*(?=</span>)")[-1]
#sapply(b4, function(x){x[1]}) #함수 바로 작성 가능
##way2
#ff<- function(x) {
#   x[2]
# }
# sapply(b4, ff)
# str_sub(sapply(b4, ff), end= -8) #end= -8: 뒤에서 글자 8개를 삭제 *변동
##url 추출
b5 <- b[which(str_detect(b, "subject_fixed")) -2]
#which: TRUE값이 있는 index만 추출
#-2 : 소스코드에서 제목 두 줄 앞
b6 <- str_sub(str_extract(b5, "(?<=href=\").*(?=data-role)"), end = -4)
url <- paste0("https://www.clien.net", b6)
data <- cbind(title, hit, url)
final_data<- rbind(final_data, data)
cat("\n", i)
}
for(i in 1:10){
url <- paste0("https://www.clien.net/service/board/park?&od=T31&category=0&po=0", i= -1)
b <- readLines(url, encoding = "UTF-8") ##or EUC-KR
length(b)
head(b, 30)
tail(b)
#str_extract(b2, "(?<=abc").*(?=ijk)")##abc와 ijk 사이에 있는 텍스트 추출
#str_extract(data, "(?<=abc).*(?=)")##앞에 abc가 있는 것 추출
#str_extract(data, "(?<=).*(?=i)")##뒤에 i가 있는 것 추출
#제목 추출
b2<- b[str_detect(b, "subject_fixed")]
title <- str_extract(b2, "(?<=title=\").*(?=\">)")
#조회수 추출
b3<- b[str_detect(b, "<span class=\"hit\">")];b3
#b4 <- str_split(b3, "hit\">");b4
##way1
for(i in 1:10){
hit <- str_extract(b3, "(?<=\">).*(?=</span>)")[-1]
#sapply(b4, function(x){x[1]}) #함수 바로 작성 가능
##way2
#ff<- function(x) {
#   x[2]
# }
# sapply(b4, ff)
# str_sub(sapply(b4, ff), end= -8) #end= -8: 뒤에서 글자 8개를 삭제 *변동
##url 추출
b5 <- b[which(str_detect(b, "subject_fixed")) -2]
#which: TRUE값이 있는 index만 추출
#-2 : 소스코드에서 제목 두 줄 앞
b6 <- str_sub(str_extract(b5, "(?<=href=\").*(?=data-role)"), end = -4)
url <- paste0("https://www.clien.net", b6)
data <- cbind(title, hit, url)
final_data<- rbind(final_data, data)
cat("\n", i)
}
}
for(i in 1:10){
hit <- str_extract(b3, "(?<=\">).*(?=</span>)")[-1]
}
##클리앙 크롤링
i <- 1
final_data <- NULL
for(i in 1:10){
b <- readLines(url, encoding = "UTF-8") ##or EUC-KR
length(b)
head(b, 30)
tail(b)
#제목 추출
b2<- b[str_detect(b, "subject_fixed")]
title <- str_extract(b2, "(?<=title=\").*(?=\">)")
#조회수 추출
b3<- b[str_detect(b, "<span class=\"hit\">")];b3
for(i in 1:10){
hit <- str_extract(b3, "(?<=\">).*(?=</span>)")[-1]
}
##클리앙 크롤링
i <- 1
final_data <- NULL
for(i in 1:10){
url <- paste0("https://www.clien.net/service/board/park?&od=T31&category=0&po=0", i= -1)
b <- readLines(url, encoding = "UTF-8") ##or EUC-KR
length(b)
head(b, 30)
tail(b)
}
##클리앙 크롤링
i <- 1
#csv로 저장하고 불러오기
setwd("/Users/adrua/Desktop/R-Crawling_new/R-Crawling")
data <- read.csv("base_data.csv")
head(data)
##R파일로 저장하고 불러오기(리스트)
#save(data, file="base_data.RData")
#load("base_data.RData")
library(stringr)
url_list <- data[,3] ;url_list
#url_list[10] , 소스코드에서 post_content / post_ccls사이에 원문이 있음
length(url_list) #300 출력됨
content <- c()
for(i in 1:length(url_list)){
##에러 발생 시 try-error 사용(예외처리)
if(class(try(b <- readLines(as.character(url_list[i]), encoding = "UTF-8"))) =="try-error"){
b6 <- ""
content <- c(content, b6)
#next;
}else{
b2 <- b[which(str_detect(b, "post_content")):which(str_detect(b, "post_ccls"))]
#출력된 21개 벡터 하나로 합치기 paste(데이터, collapse = 구분자)
b3 <- paste(b2, collapse = "")
#태그 삭제
b4 <- gsub("<.*?>", "", b3) #<.*?>: <>사이 모든 것 삭제
b5 <- gsub("\t", "", b4)
#앞 뒤 공백 삭제
b6 <- str_trim(b5)
content <- c(content, b6) ;content
cat("\n", i)
}
}
head(content)
dim(content)
final_data <- cbind(data, content)
content <- c(content, b6)
content <- c(content, b6)
cat("\n", i)
if(class(try(b <- readLines(as.character(url_list[i]), encoding = "UTF-8"))) =="try-error"){
b6 <- ""
content <- c(content, b6)
#next;
}else{
b2 <- b[which(str_detect(b, "post_content")):which(str_detect(b, "post_ccls"))]
#출력된 21개 벡터 하나로 합치기 paste(데이터, collapse = 구분자)
b3 <- paste(b2, collapse = "")
#태그 삭제
b4 <- gsub("<.*?>", "", b3) #<.*?>: <>사이 모든 것 삭제
b5 <- gsub("\t|&nbsp,", "", b4)
#앞 뒤 공백 삭제
b6 <- str_trim(b5)
content <- c(content, b6)
cat("\n", i)
}
for(i in 1:length(url_list)){
##에러 발생 시 try-error 사용(예외처리)
if(class(try(b <- readLines(as.character(url_list[i]), encoding = "UTF-8"))) =="try-error"){
b6 <- ""
content <- c(content, b6)
#next;
}else{
b2 <- b[which(str_detect(b, "post_content")):which(str_detect(b, "post_ccls"))]
#출력된 21개 벡터 하나로 합치기 paste(데이터, collapse = 구분자)
b3 <- paste(b2, collapse = "")
#태그 삭제
b4 <- gsub("<.*?>", "", b3) #<.*?>: <>사이 모든 것 삭제
b5 <- gsub("\t|&nbsp,", "", b4)
#앞 뒤 공백 삭제
b6 <- str_trim(b5)
content <- c(content, b6)
cat("\n", i)
}
}
head(content)
head(content)
dim(content)
dim(content)
content
content
b5 <- gsub("\t|&nbsp;", "", b4)
#앞 뒤 공백 삭제
b6 <- str_trim(b5)
for(i in 1:length(url_list)){
##에러 발생 시 try-error 사용(예외처리)
if(class(try(b <- readLines(as.character(url_list[i]), encoding = "UTF-8"))) =="try-error"){
b6 <- ""
content <- c(content, b6)
#next;
}else{
b2 <- b[which(str_detect(b, "post_content")):which(str_detect(b, "post_ccls"))]
#출력된 21개 벡터 하나로 합치기 paste(데이터, collapse = 구분자)
b3 <- paste(b2, collapse = "")
#태그 삭제
b4 <- gsub("<.*?>", "", b3) #<.*?>: <>사이 모든 것 삭제
b5 <- gsub("\t|&nbsp;", "", b4)
#앞 뒤 공백 삭제
b6 <- str_trim(b5)
content <- c(content, b6)
cat("\n", i)
}
}
head(content)
final_data <- cbind(data, content)
dim(content)
